if (tick == 0) {
    if (typeof (sceneexist) == 'undefined') {
        OpenCanvas('wCanvas', WC = 520, HC = 350);
        var scene, camera, renderer; CreateScene(WC, HC);

        X = 0; Y = 0; Z = 10; W = 1;

        Semaphor = DrawSemaphor()
        Semaphor.scale.set(W, W, W)
        Semaphor.position.set(0, 0, -80)
        
        var krilo1 = DrawCrilo(false);
        var krilo2 = DrawCrilo(true);
        n = 22
        krilo1.position.set(-0.5, 0, 0.4*(n-5)*15);
        krilo1.scale.set(0.75, 0.75, 0.75);
        krilo2.position.set(-0.5, 0, 0.4*(n)*15);
        krilo2.scale.set(0.75, 0.75, 0.75);
        krilo1.rotation.set(1, 0,-1.58);
        krilo2.rotation.set(0, 0, -1.58);
        Semaphor.add(krilo1);
        Semaphor.add(krilo2);

        scene.add(Semaphor);
        

        var clock = new THREE.Clock();
        var time = 0;
        var delta = 0;

        render();
    }
}

function Box(x,y,z,col) {
    var material = new THREE.MeshLambertMaterial({color: col});
    var geometry = new THREE.CubeGeometry(x,y,z);
    return new THREE.Mesh( geometry, material ); 
}

function Cyl(x,y,z,col) {
    var material = new THREE.MeshLambertMaterial({color: col});
    var geometry = new THREE.CylinderGeometry(x,y,z,15);
    return new THREE.Mesh( geometry, material );

}

function Circle(radius, segments, start, lenght, col) {
    var material = new THREE.MeshLambertMaterial({color: col});
    var geometry = new THREE.CircleGeometry(radius, segments, start, lenght);
    return new THREE.Mesh( geometry, material );
}

function Torus(radius, tube, radialSegments, tubularSegments, arc, col) {
    var material = new THREE.MeshLambertMaterial({color: col});
    var geometry = new THREE.TorusGeometry(radius, tube, radialSegments, tubularSegments, arc);
    return new THREE.Mesh( geometry, material );
}


function SegmentSemaphor(col) // материал определяет цвет секции семафора
{

    //балки верхей части сегмента
    var balka1 = Cyl(1, 1, 15, col);
    var balka2 = Cyl(1, 1, 15, col);
    var balka3 = Cyl(1, 1, 15, col);
    var balka4 = Cyl(1, 1, 15, col);
    var balka5 = Cyl(1, 1, 20, col);




    var segment = new THREE.Object3D()
    var storona = new THREE.Object3D()
    balka1.position.set(0, 0, 0);
    //balka1.rotate.set()
    storona.add(balka1);

    balka2.position.set(0, 0, 13);
    //balka4.rotation.set()
    storona.add(balka2);

    balka3.position.set(0, 7.5, 6.5);
    balka3.rotation.set(1.57, 0, 0);
    storona.add(balka3);

    balka4.position.set(0, -7.5, 6.5);
    balka4.rotation.set(1.57, 0, 0);
    storona.add(balka4);

    balka5.position.set(0, 0, 6.5);
    balka5.rotation.set(-0.7, 0, 0);
    storona.add(balka5);
    segment.add(storona);

    var storona2 = storona.clone();
    var storona3 = storona.clone();
    storona2.position.set(6.5, 3.75, 0);
    storona2.rotation.set(0, 0, 1.04);
    storona3.position.set(6.5, -3.75, 0);
    storona3.rotation.set(0, 0, -1.04);
    segment.add(storona2);
    segment.add(storona3);

    return segment
}


function DrawSvetofor(visota) {
    var svet = new THREE.Object3D()
    var corpus = Box(6, 6, 5, 0x000000);
       
    corpus.position.set(0,0,0)
    svet.add(corpus)


    var Led = new THREE.Object3D()
    var LightStart;
    var LightStartM=new THREE.MeshBasicMaterial();
    if (visota) {
        LightStartM.color.set(0xff0000)
        LightStart  = new THREE.PointLight( 0xff0000,1,8);
    }
    else {
        LightStartM.color.set(0xffba00)
        LightStart  = new THREE.PointLight( 0xffba00,1,8);
    }
    var geometryL = new THREE.SphereBufferGeometry(1.7, 15, 15 ); 
    var LightStartB = new THREE.Mesh(geometryL,LightStartM);
    Led.add(LightStart); Led.add(LightStartB);
    LightStartB.position.set(0, 0, 2);
    LightStart.position.set(0, 0, 2);
    svet.add(Led)
    return svet
}


function DrawCrilo(visota) {
    material = 0xFF0000
    var box = Box(25, 5, 1, material);
    var crug = Cyl(5, 5, 1, material);
    var material2 = 0x000000
    var box2 = Box(20, 1, 1, material2);
    var crug2 = Cyl(2, 2, 1, material2);
    var material3 = 0xFFFFFF
    var box3 = Box(25, 5, 0.5, material3);
    var crug3 = Cyl(5, 5, 0.5, material3);
    var tor = Torus(3.5, 0.1, 0.1, 100, 6.3,"#000000")
 
    var crilo = new THREE.Object3D()
    box.position.set(10,0,0);
    box.rotation.set(1.57, 0,0);
    crug.position.set(25,0,0);
    
    if (visota){
        box2.position.set(-10,0,0);
        box2.rotation.set(1.57, 0,0);
        crug2.position.set(-10,0,0);
    }
    else {
        box2.position.set(-10,0,7);
        box2.rotation.set(0,0.7,0);
        crug2.position.set(-10,0,7);
    }
    box3.position.set(10,0.7,0);
    box3.rotation.set(1.57, 0,0);
    crug3.position.set(25,0.7,0);
    tor.rotation.set(1.57, 0, 0);
    tor.position.set(25,1,0);
    crilo.add(box);
    crilo.add(crug);
    crilo.add(box2)
    crilo.add(crug2)
    crilo.add(box3)
    crilo.add(crug3)
    crilo.add(tor)
    return crilo
}

function DrawSemaphor() {
    
    var Semaphor = new THREE.Object3D()
    n = 22
    var material;
    //построение сегментов
    for (i = 0; i < n; i++) {
        
        if (i < n/2) {
            material = 0xFF0000
        }
        else {
            material = 0xFFFFFF
        }
        var segment = SegmentSemaphor(material);
        segment.position.z = 0.4*15 * i;
        segment.scale.set(0.4, 0.4, 0.4);

        

        Semaphor.add(segment);
    }
    

    var svetofor1 = DrawSvetofor(false)
    var svetofor2 = DrawSvetofor(true)
    svetofor1.position.set(2.5, -4, 0.4*(n-5)*15);
    svetofor1.scale.set(0.75, 0.75, 0.75);
    svetofor1.rotation.set(0,-1.58, 0);
    svetofor2.position.set(2.5, -4, 0.4*n*15);
    svetofor2.scale.set(0.75, 0.75, 0.75);
    svetofor2.rotation.set(0,-1.58, 0);
    Semaphor.add(svetofor1);
    Semaphor.add(svetofor2);

    material2 = 0x000000
    var dno = Box(10, 10, 5, 20, material2);
    dno.position.set(2,0,-2.5);
    Semaphor.add(dno);
    return Semaphor

}


function render() {
    requestAnimationFrame(render);
    controls.update();
    renderer.render(scene, camera);

    delta = clock.getDelta();
    time += delta;


    krilo1.rotation.x = abs(cos(time)) * (-0.9);
    //krilo1.position.z = abs(cos(time)) * (-0.9);
    krilo2.rotation.x = abs(cos(time)) * (-0.9);
    //krilo2.position.z = abs(cos(time)) * (0.9);
}

function CreateScene(WC, HC) {
    if (typeof (sceneexist) == 'undefined') {
        sceneexist = true;
        // объявление сцены
        scene = new THREE.Scene();
        const axesHelper = new THREE.AxesHelper(5);
        scene.add(axesHelper);
        scene.background = new THREE.Color(0x444488);
        camera = new THREE.PerspectiveCamera(25, WC / HC, 1, 1000);
        camera.position.x = 0;
        camera.position.y = -360;
        camera.position.z = 100;
        //  camera.lookAt( scene.position );
        renderer = new THREE.WebGLRenderer({
            alpha: true, antialias: true
        });

        renderer.setPixelRatio(window.devicePixelRatio);
        // привяжем отрисовку к html и высоте канвы
        // renderer.setSize( window.innerWidth, window.innerHeight );
        document.getElementById("wCanvas").appendChild(renderer.domElement);
        renderer.setSize(WC, HC);
        // установим модуль управления камерой
        controls = new THREE.TrackballControls(camera, renderer.domElement);
        controls.rotateSpeed = 1.0;
        controls.zoomSpeed = 1.2;
        controls.panSpeed = 0.8;
        controls.noZoom = false;
        controls.noPan = true;
        controls.staticMoving = false;
        controls.dynamicDampingFactor = 0.2;
        // источники света
        scene.add(new THREE.AmbientLight(0x555555));
        var directionalLight = new THREE.DirectionalLight(0xFFFFFF, 1);
        directionalLight.position.set(100, -100, 40).normalize();
        scene.add(directionalLight);
        directionalLight.position.set(100, -100, 40).normalize();
        scene.add(directionalLight);
    }
}

{{html
    < !DOCTYPE html >
        <head>
            <script SRC="http://livelab.spb.ru/x3d/three.min.js"></script>
            <script SRC="http://livelab.spb.ru/x3d/TrackballControls.js"></script>
            <script SRC="http://livelab.spb.ru/x3d/OBJLoader.js"></script>
            <script SRC="http://livelab.spb.ru/x3d/DDSLoader.js"></script>
            <script SRC="http://livelab.spb.ru/x3d/MTLLoader.js"></script>
            <input type=button value='Gudok' onclick='sound("done.wav");'>
    </head>
html}}